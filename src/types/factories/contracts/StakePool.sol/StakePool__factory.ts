/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakePool,
  StakePoolInterface,
} from "../../../contracts/StakePool.sol/StakePool";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakeToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061062f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c806351ed6a301161005057806351ed6a301461009857806370a08231146100c3578063a694fc3a146100ec57600080fd5b806318160ddd1461006c5780632e1a7d4d14610083575b600080fd5b6001545b6040519081526020015b60405180910390f35b6100966100913660046104fe565b6100ff565b005b6000546100ab906001600160a01b031681565b6040516001600160a01b03909116815260200161007a565b6100706100d1366004610517565b6001600160a01b031660009081526002602052604090205490565b6100966100fa3660046104fe565b610154565b80600160008282546101119190610556565b90915550503360009081526002602052604081208054839290610135908490610556565b9091555050600054610151906001600160a01b031633836101a7565b50565b8060016000828254610166919061056d565b9091555050336000908152600260205260408120805483929061018a90849061056d565b9091555050600054610151906001600160a01b031633308461023c565b6040516001600160a01b03831660248201526044810182905261023790849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261027a565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526102749085906323b872dd60e01b906084016101d3565b50505050565b60006102cf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166103649092919063ffffffff16565b80519091501561023757808060200190518101906102ed9190610585565b6102375760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6060610373848460008561037d565b90505b9392505050565b6060824710156103f55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161035b565b6001600160a01b0385163b61044c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161035b565b600080866001600160a01b0316858760405161046891906105d3565b60006040518083038185875af1925050503d80600081146104a5576040519150601f19603f3d011682016040523d82523d6000602084013e6104aa565b606091505b50915091506104ba8282866104c5565b979650505050505050565b606083156104d4575081610376565b8251156104e45782518084602001fd5b8160405162461bcd60e51b815260040161035b91906105ef565b60006020828403121561051057600080fd5b5035919050565b60006020828403121561052957600080fd5b81356001600160a01b038116811461037657600080fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561056857610568610540565b500390565b6000821982111561058057610580610540565b500190565b60006020828403121561059757600080fd5b8151801515811461037657600080fd5b60005b838110156105c25781810151838201526020016105aa565b838111156102745750506000910152565b600082516105e58184602087016105a7565b9190910192915050565b602081526000825180602084015261060e8160408501602087016105a7565b601f01601f1916919091016040019291505056fea164736f6c6343000809000a";

type StakePoolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakePoolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakePool__factory extends ContractFactory {
  constructor(...args: StakePoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakePool> {
    return super.deploy(overrides || {}) as Promise<StakePool>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): StakePool {
    return super.attach(address) as StakePool;
  }
  override connect(signer: Signer): StakePool__factory {
    return super.connect(signer) as StakePool__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakePoolInterface {
    return new utils.Interface(_abi) as StakePoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakePool {
    return new Contract(address, _abi, signerOrProvider) as StakePool;
  }
}
